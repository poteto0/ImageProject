import cv2import numpy as npimport math# 画像の傾き検出# @return 水平からの傾き角度def get_degree(img):    l_img = img.copy()    gray_image = cv2.cvtColor(l_img, cv2.COLOR_BGR2GRAY)    edges = cv2.Canny(gray_image,50,150,apertureSize = 3)    minLineLength = 200    maxLineGap = 30    # 画像内の直線を取得 #    lines = cv2.HoughLinesP(edges,1,np.pi/180,100,minLineLength,maxLineGap)    sum_arg = 0    sum_len = 0    count_arg = 0    count_len = 0    for line in lines:        # 直線の長さの平均を算出 #        for x1,y1,x2,y2 in line:            length = (x1-x2)**2 + (y1-y2)**2            sum_len += length            count_len += 1                ave_len = sum_len / count_len                    # 直線の角度の平均を算出 #            for x1,y1,x2,y2 in line:            # 直線の長さ取得 #            length = (x1-x2)**2 + (y1-y2)**2            # 直線の角度を算出 #            arg = math.degrees(math.atan2((y2-y1), (x2-x1)))            # print("arg=",arg)            HORIZONTAL = 0            DIFF = 10 # 許容誤差 -> -10 - +10 を本来の水平線と考える                        """ 平均以上の長さの線であれば            　　 => これによってメインの線以外の影響を排除する            """            if length > ave_len:               # 許容誤差以上であれば角度を算出 #               if not (arg > HORIZONTAL - DIFF and arg < HORIZONTAL + DIFF) :                   sum_arg += arg                   count_arg += 1                    if count_arg == 0:        return HORIZONTAL    else:        return (sum_arg / count_arg) - HORIZONTAL;    